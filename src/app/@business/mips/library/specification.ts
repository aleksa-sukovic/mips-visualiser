import { CPU } from '../cpu/cpu';
import { BinaryEncoder } from './binary-encoder/binary-encoder';

const encoder = new BinaryEncoder();

const Specification = {
    word_length: 32,
    visual: {
        animationDuration: 500,
        emphasizeColor: '#dd6b20',
        emphasizeTextColor: '#000',
        emphasizeLabelColor: '#fff',
        emphasizeComponentColor: '#c05621',
        deEmphasizeColor: '#2d3748',
        deEmphasizeTextColor: '#000',
        deEmphasizeLabelColor: '#fff',
        deEmphasizeComponentColor: '#2d3748',
        opacitySteps: [
            { opacity: 1 },
            { opacity: 0.9 },
            { opacity: 0.8 },
            { opacity: 0.7 },
            { opacity: 0.6 },
            { opacity: 0.5 },
            { opacity: 0.4 },
            { opacity: 0.3 },
            { opacity: 0.2 },
        ],
        inactiveOpacity: 0.2,
        nodes: {
            text: [
                'Control_claim', 'Control_text', 'Control_op_text', 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
                170, 171, 172, 'PC_text', 'lorD_0_text', 'lorD_text', 'lorD_1_text', 'read_address_label_text', 'mem_data_label_text',
                'write_address_label_text', 'write_data_label_text_1', 'instruction_label', 'instruction_25_0_label_text', 'instruction_31_26_label_text',
                79, 80, 81, 78, 'RegDst_0_text', 'RegDst_text', 'RegDst_1_text', 'MemToReg_text', 'MemToReg_0_text', 'MemToReg_1_text',
                'read_register_1_label_text', 'read_register_2_label_text', 'write_register_label_text_2', 'write_data_label_text_2', 'registers_label',
                'read_data_1_label_text', 'read_data_2_label_text', 'Sign_Extend_text', 77, 75, 51, 'SHL_2_x2_text', 'ALU_Control_text', 50,
                'ALUSelB_0_text', 'ALUSelB_1_text', 'ALUSelB_2_text', 'ALUSelB_3_text', 'ALUSelA_0_text', 'ALUSelA_1_text', 'ALUSelA_text', 76,
                'ALU_text', 'ALU_zero_label_text', 'ALU_result_label_text', 48, 'SHL_2_x2_text_1', 'Target_text', 46, 'PCSource_1_text',
                'PCSource_1_text', 'PCSource_2_text', 'PCSource_text',
            ],
            arrows: [
                96, 97, 99, 98, 100, 101, 126, 108, 107, 110, 111, 106, 109, 124, 125, 123, 119, 118, 120, 122, 121, 15, 105, 104, 105, 117, 116,
                103, 115, 112, 113, 114, 102,
            ],
            labels: [
                'PC_text', 'lorD_text', 'lorD_0_text', 'lorD_1_text', 'lorD_1_dot', 'lorD_0_dot', 'memory_label', 'read_address_label_text', 'read_address_label_dot',
                'write_address_label_text', 'write_address_label_dot', 'write_data_label_text_1', 'write_data_label_dot_1', 'mem_data_label_text', 'mem_data_label_dot',
                'instruction_label', 'instruction_25_0_label_text', 'instruction_31_26_label_text', 'instruction_25_0_label_dot', 'instruction_31_26_label_dot',
                'RegDst_0_text', 'RegDst_0_dot', 'RegDst_1_text', 'RegDst_1_dot', 'RegDst_text', 'MemToReg_0_text', 'MemToReg_0_dot', 'MemToReg_text', 'MemToReg_1_text', 'MemToReg_1_text',
                'read_register_1_label_text', 'read_register_1_label_dot', 'read_register_2_label_text', 'read_register_2_label_dot', 'registers_label', 'read_data_1_label_text',
                'read_data_1_label_dot', 'read_data_2_label_text', 'read_data_2_label_dot', 'Sign_Extend_text', 'SHL_2_x2_text', 'ALU_Control_text',
                'ALUSelB_text', 'ALUSelB_0_text', 'ALUSelB_0_dot', 'ALUSelB_1_text', 'ALUSelB_1_dot', 'ALUSelB_2_text', 'ALUSelB_2_dot', 'ALUSelB_3_text', 'ALUSelB_3_dot',
                'ALUSelA_0_text', 'ALUSelA_0_dot', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelA_text',
                'ALU_text', 'ALU_zero_label_text', 'ALU_zero_label_dot', 'ALU_result_label_text', 'ALU_result_label_dot', 'SHL_2_x2_text_1', 'Target_text',
                'PCSource_text', 'PCSource_0_dot', 'PCSource_0_text', 'PCSource_1_dot', 'PCSource_1_text', 'PCSource_2_dot', 'PCSource_2_text',
                'write_register_label_text_2', 'write_register_label_dot', 'write_data_label_text_2', 'write_data_label_dot_2',
                'Control_claim', 'Control_text', 'Control_op_text', 'Control_dot',
            ],
            components: [
                'ALU_background', 'SHL_2_x2_background', 'ALU_Control_background', 'SHL_2_x2_background_1', 'Control_background', 'Sign_Extend_background',
                'PC_background', 'lorD_background', 'memory_background', 'OR_gate_background', 'AND_gate_background', 'instruction_background', 'RegDst_background',
                'MemToReg_Background', 'registers_background', 'ALUSelA_background', 'ALUSelB_background', 'Target_background', 'MemToReg_background',
            ]
        },
    },
    instructions: [
        {
            alias: 'add',
            opcode: '000000',
            funct: '100000',
            type: 'R',
            clocks: [
                'clock_1',
                'clock_2',
                'clock_4',
                'clock_9',
            ],
        },
        {
            alias: 'sub',
            opcode: '000000',
            funct: '100010',
            type: 'R',
            clocks: [
                'clock_1',
                'clock_2',
                'clock_4',
                'clock_9',
            ],
        },
        {
            alias: 'slt',
            opcode: '000000',
            funct: '101010',
            type: 'R',
            clocks: [
                'clock_1',
                'clock_2',
                'clock_4',
                'clock_9',
            ],
        },
        {
            alias: 'addi',
            opcode: '001000',
            funct: '',
            type: 'I',
            clocks: [
                'clock_1',
                'clock_2',
                'clock_3',
                'clock_9',
            ],
        },
        {
            alias: 'beq',
            opcode: '000100',
            funct: '',
            type: 'I',
            clocks: [
                'clock_1',
                'clock_2',
                'clock_5',
            ],
        },
        {
            alias: 'bne',
            opcode: '000101',
            funct: '',
            type: 'I',
            clocks: [
                'clock_1',
                'clock_2',
                'clock_5',
            ],
        },
        {
            alias: 'lw',
            opcode: '100011',
            funct: '',
            type: 'I',
            clocks: [
                'clock_1',
                'clock_2',
                'clock_3',
                'clock_7',
                'clock_10',
            ],
        },
        {
            alias: 'sw',
            opcode: '101011',
            funct: '',
            type: 'I',
            clocks: [
                'clock_1',
                'clock_2',
                'clock_3',
                'clock_8',
            ],
        },
        {
            alias: 'j',
            opcode: '000010',
            funct: '',
            type: 'J',
            clocks: [
                'clock_1',
                'clock_2',
                'clock_6',
            ],
        },
    ],
    registers: [
        {
            id: 'ir',
            aliases: ['$ir'],
            value:  0,
            editable: false,
            visible: true,
        },
        {
            id: 'pc',
            aliases: ['$pc'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: 'target',
            aliases: ['$target'],
            value:  0,
            editable: false,
            visible: true,
        },
        {
            id: 'memData',
            aliases: ['$memData'],
            value:  0,
            editable: true,
            visible: false,
        },
        {
            id: '00000',
            aliases: ['$0', '$zero'],
            value:  0,
            editable: false,
            visible: true,
        },
        {
            id: '00001',
            aliases: ['$1', '$at'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '00010',
            aliases: ['$2', '$v0'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '00011',
            aliases: ['$3', '$v1'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '00100',
            aliases: ['$4', '$a0'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '00101',
            aliases: ['$5', '$a1'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '00110',
            aliases: ['$6', '$a2'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '00111',
            aliases: ['$7', '$a3'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '01000',
            aliases: ['$8', '$t0'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '01001',
            aliases: ['$9', '$t1'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '01010',
            aliases: ['$10', '$t2'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '01011',
            aliases: ['$11', '$t3'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '01100',
            aliases: ['$12', '$t4'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '01101',
            aliases: ['$13', '$t5'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '01110',
            aliases: ['$14', '$t6'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '01111',
            aliases: ['$15', '$t7'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '10000',
            aliases: ['$16', '$s0'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '10001',
            aliases: ['$17', '$s1'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '10010',
            aliases: ['$18', '$s2'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '10010',
            aliases: ['$18', '$s2'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '10011',
            aliases: ['$19', '$s3'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '10100',
            aliases: ['$20', '$s4'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '10101',
            aliases: ['$21', '$s5'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '10110',
            aliases: ['$22', '$s6'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '10111',
            aliases: ['$23', '$s7'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '11000',
            aliases: ['$24', '$t8'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '11001',
            aliases: ['$25', '$t9'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '11010',
            aliases: ['$26', '$k0'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '11011',
            aliases: ['$27', '$k1'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '11100',
            aliases: ['$28', '$gp'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '11101',
            aliases: ['$29', '$sp'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '11110',
            aliases: ['$30', '$fp'],
            value:  0,
            editable: true,
            visible: true,
        },
        {
            id: '11111',
            aliases: ['$31', '$ra'],
            value:  0,
            editable: true,
            visible: true,
        },
    ],
    global_tooltips: [
        {
            ids: ['instruction_add'],
            additional: [],
            title: '<div class="text-gray-900">ADD <br><span class="text-gray-500 text-sm font-normal italic">add $1, $2, $3</span></div>',
            description: '<div>Adds registers $2 and $3 and stores the result in $1.</div>',
            value: (cpu: CPU) => null,
        },
        {
            ids: ['instruction_addi'],
            additional: [],
            title: '<div class="text-gray-900">ADDI <br><span class="text-gray-500 text-sm font-normal italic">addi $1, $2, 256</span></div>',
            description: '<div>Adds register $2 and sign-extended immediate value and stores the result in $1.</div>',
            value: (cpu: CPU) => null,
        },
        {
            ids: ['instruction_sub'],
            additional: [],
            title: '<div class="text-gray-900">SUB <br><span class="text-gray-500 text-sm font-normal italic">sub $1, $2, $3</span></div>',
            description: '<div>Subtracts register $3 from register $2 and stores the result in $1.</div>',
            value: (cpu: CPU) => null,
        },
        {
            ids: ['instruction_beq'],
            additional: [],
            title: '<div class="text-gray-900">BEQ <br><span class="text-gray-500 text-sm font-normal italic">beq $1, $2, 1500</span></div>',
            description: '<div>Branches if registers $1 and $2 are equal.</div>',
            value: (cpu: CPU) => null,
        },
        {
            ids: ['instruction_bne'],
            additional: [],
            title: '<div class="text-gray-900">BNE <br><span class="text-gray-500 text-sm font-normal italic">bne $1, $2, 1500</span></div>',
            description: '<div>Branches if registers $1 and $2 are not equal.</div>',
            value: (cpu: CPU) => null,
        },
        {
            ids: ['instruction_lw'],
            additional: [],
            title: '<div class="text-gray-900">LW <br><span class="text-gray-500 text-sm font-normal italic">lw $1, 256($2)</span></div>',
            description: '<div>Loads word into $1 register from specified address.</div>',
            value: (cpu: CPU) => null,
        },
        {
            ids: ['instruction_sw'],
            additional: [],
            title: '<div class="text-gray-900">SW <br><span class="text-gray-500 text-sm font-normal italic">sw $1, 256($2)</span></div>',
            description: '<div>Stores the contents of $1 register at specified address.</div>',
            value: (cpu: CPU) => null,
        },
        {
            ids: ['instruction_slt'],
            additional: [],
            title: '<div class="text-gray-900">SLT <br><span class="text-gray-500 text-sm font-normal italic">slt $1, $2, $3</span></div>',
            description: '<div>Sets register $1 to \'1\' if $2 < $3 or to \'0\' otherwise.</div>',
            value: (cpu: CPU) => null,
        },
        // Player
        {
            ids: ['player_execute'],
            additional: [],
            title: 'Execute',
            description: '<div>Executes loaded instruction, step by step.</div>',
            value: (cpu: CPU) => null,
        },
        {
            ids: ['player_forward'],
            additional: [],
            title: 'Next clock',
            description: '<div>Executes the next instruction clock.</div>',
            value: (cpu: CPU) => null,
        },
        // Registers
        {
            ids: ['register_ir'],
            additional: [],
            title: '$ir / Instruction Register',
            description: '<div>Register holding the instruction currently being executed.</div>',
            value: (cpu: CPU) => cpu.register('ir').value,
        },
        {
            ids: ['register_pc'],
            additional: [],
            title: '$pc / Program Counter',
            description: '<div>Register holding the address of next instruction to be executed.</div>',
            value: (cpu: CPU) => cpu.register('pc').value,
        },
        {
            ids: ['register_target'],
            additional: [],
            title: '$target / Target',
            description: '<div>Register holding target jump address calculated in clock 2 of every instruction.</div>',
            value: (cpu: CPU) => cpu.register('target').value,
        },
        {
            ids: ['register_memData'],
            additional: [],
            title: 'Memory Data',
            description: '<div>Register storing data read from memory.</div>',
            value: (cpu: CPU) => cpu.register('memData').value,
        },
        {
            ids: ['register_00000'],
            additional: [],
            title: '$0 / $zero',
            description: '<div>Register constant.</div>',
            value: (cpu: CPU) => cpu.register('$0').value,
        },
        {
            ids: ['register_00001'],
            additional: [],
            title: '$1 / $at',
            description: '<div>Register reserved for assembler.</div>',
            value: (cpu: CPU) => cpu.register('$1').value,
        },
        {
            ids: ['register_00010'],
            additional: [],
            title: '$2 / $v0',
            description: '<div>Used for expression evaluation and function result.</div>',
            value: (cpu: CPU) => cpu.register('$2').value,
        },
        {
            ids: ['register_00011'],
            additional: [],
            title: '$3 / $v1',
            description: '<div>Used for expression evaluation and function result.</div>',
            value: (cpu: CPU) => cpu.register('$3').value,
        },
        {
            ids: ['register_00100'],
            additional: [],
            title: '$4 / $a0',
            description: '<div>Used for passing arguments.</div>',
            value: (cpu: CPU) => cpu.register('$4').value,
        },
        {
            ids: ['register_00101'],
            additional: [],
            title: '$5 / $a1',
            description: '<div>Used for passing arguments.</div>',
            value: (cpu: CPU) => cpu.register('$5').value,
        },
        {
            ids: ['register_00110'],
            additional: [],
            title: '$6 / $a2',
            description: '<div>Used for passing arguments.</div>',
            value: (cpu: CPU) => cpu.register('$6').value,
        },
        {
            ids: ['register_00111'],
            additional: [],
            title: '$7 / $a3',
            description: '<div>Used for passing arguments.</div>',
            value: (cpu: CPU) => cpu.register('$7').value,
        },
        {
            ids: ['register_01000'],
            additional: [],
            title: '$8 / $t0',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$8').value,
        },
        {
            ids: ['register_01001'],
            additional: [],
            title: '$9 / $t1',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$9').value,
        },
        {
            ids: ['register_01010'],
            additional: [],
            title: '$10 / $t2',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$10').value,
        },
        {
            ids: ['register_01011'],
            additional: [],
            title: '$11 / $t3',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$11').value,
        },
        {
            ids: ['register_01100'],
            additional: [],
            title: '$12 / $t4',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$12').value,
        },
        {
            ids: ['register_01101'],
            additional: [],
            title: '$13 / $t5',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$13').value,
        },
        {
            ids: ['register_01110'],
            additional: [],
            title: '$14 / $t6',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$14').value,
        },
        {
            ids: ['register_01111'],
            additional: [],
            title: '$15 / $t7',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$15').value,
        },
        {
            ids: ['register_10000'],
            additional: [],
            title: '$16 / $s0',
            description: '<div>Saved temporary register, preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$16').value,
        },
        {
            ids: ['register_10001'],
            additional: [],
            title: '$17 / $s1',
            description: '<div>Saved temporary register, preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$17').value,
        },
        {
            ids: ['register_10010'],
            additional: [],
            title: '$18 / $s2',
            description: '<div>Saved temporary register, preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$18').value,
        },
        {
            ids: ['register_10011'],
            additional: [],
            title: '$19 / $s3',
            description: '<div>Saved temporary register, preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$19').value,
        },
        {
            ids: ['register_10100'],
            additional: [],
            title: '$20 / $s4',
            description: '<div>Saved temporary register, preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$20').value,
        },
        {
            ids: ['register_10101'],
            additional: [],
            title: '$21 / $s5',
            description: '<div>Saved temporary register, preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$21').value,
        },
        {
            ids: ['register_10110'],
            additional: [],
            title: '$22 / $s6',
            description: '<div>Saved temporary register, preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$22').value,
        },
        {
            ids: ['register_10111'],
            additional: [],
            title: '$23 / $s7',
            description: '<div>Saved temporary register, preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$23').value,
        },
        {
            ids: ['register_11000'],
            additional: [],
            title: '$24 / $t8',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$24').value,
        },
        {
            ids: ['register_11001'],
            additional: [],
            title: '$25 / $t9',
            description: '<div>Temporary register, not preserved between function calls.</div>',
            value: (cpu: CPU) => cpu.register('$25').value,
        },
        {
            ids: ['register_11010'],
            additional: [],
            title: '$26 / $k0',
            description: '<div>Register reserved for OS kernel.</div>',
            value: (cpu: CPU) => cpu.register('$26').value,
        },
        {
            ids: ['register_11011'],
            additional: [],
            title: '$27 / $k1',
            description: '<div>Register reserved for OS kernel.</div>',
            value: (cpu: CPU) => cpu.register('$27').value,
        },
        {
            ids: ['register_11100'],
            additional: [],
            title: '$28 / $gp',
            description: '<div>Register pointing to global area.</div>',
            value: (cpu: CPU) => cpu.register('$28').value,
        },
        {
            ids: ['register_11101'],
            additional: [],
            title: '$29 / $sp',
            description: '<div>Register known as stack pointer.</div>',
            value: (cpu: CPU) => cpu.register('$29').value,
        },
        {
            ids: ['register_11110'],
            additional: [],
            title: '$30 / $fp',
            description: '<div>Register known as frame pointer.</div>',
            value: (cpu: CPU) => cpu.register('$29').value,
        },
        {
            ids: ['register_11111'],
            additional: [],
            title: '$31 / $ra',
            description: '<div>Register storing return address, used by function calls.</div>',
            value: (cpu: CPU) => cpu.register('$31').value,
        }
    ],
    clocks: [
        {
            id: 'null_clock',
            focus: [],
            tooltips: [],
        },
        {
            id: 'clock_1',
            focus: [
                'Control_background', 'Control_text', 'Control_claim', 'Control_background', 181, 162, 170, 174, 161, 180, 'lorD_background', 'lorD_text', 'lorD_0_text', 'lorD_0_dot', 130, 98, 164, 183, 169, 187, 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_1_dot', 'ALUSelB_1_text', 120, 35, 50, 21, 117, 'ALUSelA_background', 'ALUSelA_0_dot', 'ALUSelA_0_text', 'ALUSelA_text', 22, 116, 168, 186, 159, 175, 177, 'OR_gate_background', 127, 129, 139, 97, 166, 185, 13, 'memory_background', 'mem_data_label_text', 'mem_data_label_dot', 'read_address_label_text', 'read_address_label_dot', 'memory_label', 134, 135, 156, 126, 'PC_background', 'PC_text', 128, 91, 140, 12, 18, 33, 104, 'instruction_background', 'instruction_label', 'ALU_background', 'ALU_text', 'ALU_result_label_text', 'ALU_result_label_dot', 32, 143, 23, 11, 25, 141, 28, 112, 'ALU_Control_background', 'ALU_Control_text', 37, 'MemToReg_background', 'PCSource_0_dot', 'PCSource_0_text', 26, 96, 'PCSource_background',
            ],
            tooltips: [
                {
                    ids: [128, 91, 33, 13, 22, 116, 18, 104, 'ALUSelA_background', 'ALUSelA_0_dot', 'ALUSelA_0_text', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot'],
                    additional: [],
                    title: 'PC Value',
                    description: '<div>Value of PC is brought as first ALU argument.</div>',
                    value: (cpu: CPU) => {
                        const oldPc = encoder.number(cpu.register('$pc').value) - 4;
                        const newPc = encoder.number(cpu.register('$pc').value).toString(10);
                        return newPc + ' (' + oldPc + ' + 4)';
                    },
                },
                {
                    ids: ['120', '50', '35', '21', '50', '140', '12', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_1_text', 'ALUSelB_1_dot'],
                    additional: [],
                    title: 'PC Increment',
                    description: '<div>PC value is incremented by word length which is 4.</div>',
                    value: (cpu: CPU) => cpu.alu.op2,
                },
                {
                    ids: ['143', '141', '112', '32', '28', '25', '23', '11', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_background'],
                    additional: ['PCSource_0_dot', 'PCSource_0_text', 'PCSource_background', 'PCSource_text'],
                    title: '<div class="text-center">ALU <br>(Arithmetic logic unit)</div>',
                    description: '<div>Increments PC by 4.<br>Result is brought to PCSource multiplexer.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: ['170', '174'],
                    additional: ['140', '139', '128', '127', '104', '91', '33', '18', '13', '12', '116', '22', 'PC_background', 'PC_text', 'ALUSelA_background'],
                    title: '<div class="text-center">ALUSelA <br>(first ALU operand control)</div>',
                    description: '<div>Chooses PC value to be first ALU argument.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: ['169', '187'],
                    additional: ['120', '50', '35', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_1_text', 'ALUSelB_1_dot'],
                    title: '<div class="text-center">ALUSelB <br>(second ALU operand control)</div>',
                    description: '<div>Chooses immediate value of 4 as second ALU argument.</div>',
                    value: (cpu: CPU) => cpu.alu.op2,
                },
                {
                    ids: ['166', '185'],
                    additional: ['143', '141', '112', '96', '32', '28', '26', '25', '23', '11', 'PCSource_background', 'PCSource_text', 'PCSource_0_text', 'PCSource_0_dot'],
                    title: '<div class="text-center">PCSource</div>',
                    description: '<div>Selects ALU result as value to be written into PC register.</div>',
                    value: (cpu: CPU) => cpu.control.pcSource,
                },
                {
                    ids: ['186', '168', '37', 'ALU_Control_text', 'ALU_Control_background'],
                    additional: [],
                    title: '<div class="text-center">ALU Control signal</div>',
                    description: '<div>Instructs ALU to do addition.</div>',
                    value: (cpu: CPU) => cpu.alu.op,
                },
                {
                    ids: ['26', 'PCSource_background', 'PCSource_text', 'PCSource_0_text', 'PCSource_0_dot'],
                    additional: [],
                    title: '<div class="text-center"></div>',
                    description: '<div>Passes the ALU result to PC register.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: ['instruction_background', 'instruction_label', 'instruction_25_0_label_dot', 'instruction_25_0_label_text', 'instruction_31_26_label_text', 'instruction_31_26_label_dot'],
                    additional: [],
                    title: '<div class="text-center">Instruction register (IR)</divc>',
                    description: '<div>Holds the instruction read from memory.</div>',
                    value: (cpu: CPU) => cpu.register('$ir').value,
                },
                {
                    ids: ['164', '183'],
                    additional: [],
                    title: '<div class="text-center">IRWrite</div>',
                    description: '<div>Control signal allowing for new, incremented value of PC to be written.</div>',
                    value: (cpu: CPU) => cpu.control.irWrite,
                },
                {
                    ids: ['162', '181'],
                    additional: ['memory_background', 'memory_label', 'read_address_label_dot', 'read_address_label_text'],
                    title: '<div class="text-center">MemRead</div>',
                    description: '<div>Control signal allowing read operation to fetch the instruction PC is pointing to.</div>',
                    value: (cpu: CPU) => cpu.control.memRead,
                },
                {
                    ids: ['PC_background', 'PC_text'],
                    additional: ['140', '139', '129', '128', '127', '104', '97', '91', '33', '18', '13', '12'],
                    title: '<div class="text-center">PC register</div>',
                    description: '<div>Holds the current instruction.<br>In first clock, instruction is read from address PC is pointing to. Also, value of PC is incremented by 4, so it points to the next instruction to be executed.</div>',
                    value: (cpu: CPU) => cpu.register('$pc').value,
                },
                {
                    ids: ['lorD_background', 'lorD_text', 'lorD_0_text', 'lorD_0_dot', 'lorD_1_text', 'lorD_1_dot', '180', '161'],
                    additional: ['130', '98', 'read_address_label_dot', 'read_address_label_text', 'memory_background'],
                    title: '<div class="text-center">lorD</div>',
                    description: '<div>Chooses PC value as read address.</div>',
                    value: (cpu: CPU) => cpu.control.lorD,
                },
                {
                    ids: ['memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'read_address_label_dot', 'read_address_label_text', 'write_address_label_dot', 'write_address_label_text', 'write_data_label_dot_1', 'write_data_label_text_1'],
                    additional: [],
                    title: '<div class="text-center">RAM Memory</div>',
                    description: '<div>Instruction is read from RAM memory at address held in PC register.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: ['177', '175', '159', 'OR_gate_background'],
                    additional: [],
                    title: '<div class="text-center">PCWrite</div>',
                    description: '<div>Allows new PC value to be written. Since PCWrite value is 1 and it is brought to OR gate, than we are sure that write action will be allowed.</div>',
                    value: (cpu: CPU) => cpu.control.pcWrite,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
            ],
        },
        {
            id: 'clock_2',
            focus: [
                'Control_background', 'Control_text', 'Control_claim', 'Control_background', 'Control_op_text', 170, 174, 140, 91, 13, 128, 139, 127, 33, 18, 12, 104, 22, 116, 'ALUSelA_background', 'ALUSelA_0_dot', 'ALUSelA_0_text', 'ALUSelA_text', 'ALUSelB_background', 'ALUSelB_text', 21, 117, 168, 186, 'ALU_Control_background', 'ALU_Control_text', 37, 'ALU_background', 'ALU_text', 'ALU_result_label_text', 'ALU_result_label_dot', 32, 143, 167, 173, 'PC_text', 'PC_background', 11, 23, 25, 31, 115, 141, 'Target_text', 'Target_background', 'instruction_background', 'instruction_label', 'instruction_25_0_label_text', 'instruction_25_0_label_dot', 'instruction_31_26_label_text', 'instruction_31_26_label_dot', 158, 13, 34, 102, 95, 151, 152, 84, 83, 90, 107, '154', '153', '109', '108', '94', '191', '191', '74', 'RegDst_background', 'RegDst_text', 'RegDst_0_text', 'RegDst_0_dot', 'RegDst_1_text', 'RegDst_1_dot', '186', '148', '147', '123', '121', '119', '89', '75', '190', '69', '62', '61', '60', '59', '53', '52', '51', '49', '36', '4', 'Sign_Extend_text', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_3_text', 'ALUSelB_3_dot', 'SHL_2_x2_text', 'SHL_2_x2_background', 'Sign_Extend_background', 87, 93, 155, 106, 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'write_register_label_dot', 'write_register_label_text_2', '142', '114', '88', '86', '85', '48', '47', '46', '45', '30', '29', '24', '19', 'SHL_2_x2_text_1', 'MemToReg_background', 'PCSource_text', 'PCSource_2_text', 'PCSource_2_dot', 'SHL_2_x2_background_1', 79, 80, 81, 'PCSource_1_text', 'PCSource_1_dot', 27, 113, 'PCSource_background',
            ],
            tooltips: [
                {
                    ids: ['140', '139', '128', '127', '104', '91', '33', '18', '13', '12', 'Control_dot', 'PC_background', 'PC_text'],
                    additional: [],
                    title: '<div class="text-center">PC</div>',
                    description: '<div>Current value of PC (incremented by 4 in first clock) is brought as first ALU argument.</div>',
                    value: (cpu: CPU) => cpu.register('$pc').value,
                },
                {
                    ids: ['21', '117', '151', '148', '147', '123', '121', '119', '104', '95', '89', '78', '75', '190', '69', '62', '61', '60', '59', '53', '52', '51', '49', '36', '4', 'Sign_Extend_text', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_3_text', 'ALUSelB_3_dot', 'SHL_2_x2_text', 'SHL_2_x2_background', 'Sign_Extend_background'],
                    additional: ['instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text'],
                    title: '<div class="text-center">Instruction offset</div>',
                    description: '<div>16-bit offset read from instruction is brought as second ALU argument.</div>',
                    value: (cpu: CPU) => cpu.instruction.offset,
                },
                {
                    ids: [143, 141, 115, 32, 31, 25, 23, 11, 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'Target_background', 'Target_text', 'ALU_background'],
                    additional: [],
                    title: '<div class="text-center">ALU</div>',
                    description: '<div>In second clock, ALU is used to calculate the target branch address. Address is calculated by adding 16-bit offset read from instruction to current value of the PC register.</div>',
                    value: (cpu: CPU) => cpu.instruction.offset,
                },
                {
                    ids: ['174', '170', '116', '22', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_0_text', 'ALUSelA_0_dot'],
                    additional: ['140', '139', '128', '127', '104', '91', '33', '18', '13', '12', 'PC_background', 'PC_text'],
                    title: '<div class="text-center">ALUSelA</div>',
                    description: '<div>Selects PC source as first ALU operand.</div>',
                    value: (cpu: CPU) => cpu.register('$pc').value,
                },
                {
                    ids: ['instruction_background', 'instruction_label', 'instruction_25_0_label_dot', 'instruction_25_0_label_text', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', '158', '119', '155', '154', '153', '152', '151', '148', '147', '142', '122', '121', '119', '114', '109', '107', '106', '102', '95', '94', '191', '191', '93', '90', '89', '88', '87', '86', '85', '84', '83', '77', '75', '74', '190', '69', '62', '61', '60', '59', '57', '53', '52', '51', '49', '47', '45', '44', '38', '36', '34', '30', '29', '24', '19', '17', '16', '15', '14', '13', '12', '11', '4', '3', 'RegDst_background', 'RegDst_text', 'RegDst_0_text', 'RegDst_0_dot', 'RegDst_1_text', 'RegDst_1_dot', 'Sign_Extend_text', 'SHL_2_x2_text', 'SHL_2_x2_text_1', 'SHL_2_x2_background', 'Sign_Extend_background', 'SHL_2_x2_background_1', '108'],
                    additional: [],
                    title: '<div class="text-center">Instruction loading</div>',
                    description: '<div>Instruction is parsed and appropriate portions of it are distributed across the CPU.</div>',
                    value: (cpu: CPU) => cpu.instruction.binary,
                },
                {
                    ids: ['registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'write_register_label_dot', 'write_register_label_text_2', 'write_data_label_dot_2', 'write_data_label_text_2'],
                    additional: ['155', '153', '152', '151', '109', '106', '95', '94', '191', '93', '84', '83', '87', '154'],
                    title: '<div class="text-center">Registers</div>',
                    description: '<div>Register pointers are initialized from instruction.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: [167, 173],
                    additional: ['Target_text', 'Target_background'],
                    title: '<div class="text-center">TargetWrite</div>',
                    description: '<div>Control signal allowing for write into $target register to happen.</div>',
                    value: (cpu: CPU) => cpu.control.targetWrite,
                },
                {
                    ids: ['186', '168', '37', 'ALU_Control_text', 'ALU_Control_background'],
                    additional: [],
                    title: '<div class="text-center">ALU Control signal</div>',
                    description: '<div>Instructs ALU to do addition.</div>',
                    value: (cpu: CPU) => cpu.alu.op,
                },
                {
                    ids: ['PCSource_background', 'PCSource_text', 'PCSource_0_text', 'PCSource_0_dot', 'PCSource_2_text', 'PCSource_2_dot', 'PCSource_1_text', 'PCSource_1_dot'],
                    additional: [],
                    title: '<div class="text-center">PCSource</div>',
                    description: '<div>Determines what value will be sent to the PC register. In this clock, the possible jump address is brought as second input and address of possible branching is brought as first input.</div>',
                    value: (cpu: CPU) => cpu.control.pcSource,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
            ],
        },
        {
            id: 'clock_3',
            focus: [
                '174', '170', '153', '152', '151', '116', '106', '105', '95', '93', '92', '87', '84', '83', '22', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_background', '21', '117', '81', '187', '169', '151', '148', '147', '123', '122', '95', '89', '78', '75', '190', '69', '62', '61', '59', '52', '51', '49', '38', '17', '3', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'Sign_Extend_text', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_2_text', 'ALUSelB_2_dot', 'Sign_Extend_background', '186', '168', '37', '143', '32', 'ALU_Control_text', 'ALU_Control_background', 'Control_background', 'Control_text', 'Control_claim', 'Control_background', '157', '150', '133', '132', '131', '101', '63', 'memory_background', 'memory_label', 'write_address_label_dot', 'write_address_label_text', 'lorD_background', 'lorD_text', 'lorD_1_text', 'lorD_1_dot',
            ],
            tooltips: [
                {
                    ids: ['116', '105', '92', '22', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', '155', '153', '152', '151', '106', '95', '93', '87', '84', '83'],
                    additional: [170, 174, '155', '153', '152', '151', '106', '95', '93', '87', '84', '83', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text'],
                    title: '<div class="text-center">ALUSelA</div>',
                    description: '<div>Value of instruction specified register (RS) is brought as first ALU operand.</div>',
                    value: (cpu: CPU) => cpu.register(cpu.instruction.rs).value,
                },
                {
                    ids: [170, 174],
                    additional: [92, 105, 170, 174, '155', '153', '152', '151', '106', '95', '93', '87', '84', '83', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'ALUSelA_background'],
                    title: '<div class="text-center">ALUSelA</div>',
                    description: '<div>Selects instruction specified register (RS) as first ALU operand.</div>',
                    value: (cpu: CPU) => cpu.control.aluSelA,
                },
                {
                    ids: ['151', '148', '147', '123', '122', '95', '89', '190', '69', '62', '61', '59', '52', '49', '38', '17', '3', 'Sign_Extend_text', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_2_text', 'ALUSelB_2_dot', 'Sign_Extend_background', 21, 117],
                    additional: ['instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text'],
                    title: '<div class="text-center">ALUSelB</div>',
                    description: '<div>Value of instruction specified 16-bit offset is brought as second ALU operand.</div>',
                    value: (cpu: CPU) => cpu.instruction.offset,
                },
                {
                    ids: ['registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'write_register_label_dot', 'write_register_label_text_2', 'write_data_label_dot_2', 'write_data_label_text_2'],
                    additional: ['155', '153', '152', '151', '106', '95', '93', '87', '84', '83'],
                    title: '<div class="text-center">Base register</div>',
                    description: '<div>Value in instruction specified register (RS) is read.</div>',
                    value: (cpu: CPU) => cpu.register(cpu.instruction.rs).value,
                },
                {
                    ids: ['instruction_background', 'instruction_label', 'instruction_25_0_label_dot', 'instruction_25_0_label_text', 'instruction_31_26_label_dot', 'instruction_31_26_label_text'],
                    additional: [],
                    title: '<div class="text-center">Instruction Register</div>',
                    description: '<div>Register holding current instruction.</div>',
                    value: (cpu: CPU) => cpu.register('$ir').value,
                },
                {
                    ids: ['157', '150', '143', '133', '132', '131', '101', '99', '63', '32', 'memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'read_address_label_dot', 'read_address_label_text', 'write_address_label_dot', 'write_address_label_text', 'write_data_label_dot_1', 'write_data_label_text_1', 'lorD_background', 'lorD_text', 'lorD_1_text', 'lorD_1_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_background'],
                    additional: [],
                    title: '<div class="text-center">ALU</div>',
                    description: '<div>In clock 3 of LW and SW instructions ALU calculates the address by adding instruction specified base register (RS) with 16-bit offset which is also read from the instruction.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: [168, 186, 37, 'ALU_Control_background', 'ALU_Control_text'],
                    additional: [],
                    title: '<div class="text-center">ALUOp</div>',
                    description: '<div>Tells ALU to do addition.</div>',
                    value: (cpu: CPU) => cpu.control.aluOp,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: [169, 187],
                    additional: [],
                    title: '<div class="text-center">ALUSelB</div>',
                    description: '<div>Selects instruction specified 16-bit offset as second ALU operand.</div>',
                    value: (cpu: CPU) => cpu.control.aluSelB,
                },
            ],
        },
        {
            id: 'clock_4',
            focus: [
                '32', '143', '187', '186', '174', '170', '169', '168', '155', '153', '152', '151', '144', '118', '117', '116', '106', '105', '95', '93', '92', '87', '84', '83', '55', '40', '39', '22', '21', '1', 'registers_background', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'Control_background', 'Control_claim', 'Control_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_0_text', 'ALUSelB_0_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_Control_text', 'ALU_background', 'ALU_Control_background', '151', '148', '95', '89', '77', '190', '69', '57', '44', '37', '16', '15', 'registers_label', '154', '109', '94', '191', '80', 'read_register_2_label_dot', 'read_register_2_label_text'
            ],
            tooltips: [
                {
                    ids: ['116', '92', '22', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot'],
                    additional: ['155', '153', '152', '151', '106', '95', '93', '87', '84', '83', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', '116'],
                    title: '<div class="text-center">ALUSelA/div>',
                    description: '<div>Value of instruction specified register (RS) is brought as first ALU argument.</div>',
                    value: (cpu: CPU) => cpu.register(cpu.instruction.rs).value,
                },
                {
                    ids: ['144', '118', '117', '55', '40', '39', '21', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_0_text', 'ALUSelB_0_dot'],
                    additional: ['1', '154', '153', '152', '151', '109', '95', '94', '191', '84', '83', 'registers_background', 'registers_label', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text'],
                    title: '<div class="text-center">ALUSelB</div>',
                    description: '<div>Value of instruction specified register (RT) is brought as second ALU argument.</div>',
                    value: (cpu: CPU) => cpu.register(cpu.instruction.rt).value,
                },
                {
                    ids: [169, 187],
                    additional: ['144', '118', '117', '55', '40', '39', '21', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_0_text', 'ALUSelB_0_dot'],
                    title: '<div class="text-center">ALUSelB/div>',
                    description: '<div>Chooses value of instruction specified register (RT) as second ALU argument.</div>',
                    value: (cpu: CPU) => cpu.control.aluSelB,
                },
                {
                    ids: [170, 174],
                    additional: ['116', '92', '22', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot'],
                    title: '<div class="text-center">ALUSelA/div>',
                    description: '<div>Chooses value of instruction specified register (RS) as first ALU argument.</div>',
                    value: (cpu: CPU) => cpu.control.aluSelA,
                },
                {
                    ids: ['87', '155', '154', '153', '152', '151', '109', '106', '95', '94', '191', '93', '84', '83', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'write_register_label_dot', 'write_register_label_text_2', 'write_data_label_dot_2', 'write_data_label_text_2'],
                    additional: ['instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text'],
                    title: '<div class="text-center">Registers</div>',
                    description: '<div>Values of instruction specified registers are brought as ALU arguments.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: ['instruction_background', 'instruction_label', 'instruction_25_0_label_dot', 'instruction_25_0_label_text', 'instruction_31_26_label_dot', 'instruction_31_26_label_text'],
                    additional: ['155', '154', '153', '152', '151', '109', '106', '95', '94', '191', '93', '87', '84', '83', '106', '148', '89', '190', '69', '57', '44', '37', '16', '15', 'ALU_Control_text', 'ALU_Control_background'],
                    title: '<div class="text-center">Registers</div>',
                    description: '<div>Values of instruction specified registers and funct field are read.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: ['151', '148', '95', '89', '190', '69', '57', '44', '37', '16', '15', 'ALU_Control_text', 'ALU_Control_background'],
                    additional: [],
                    title: '<div class="text-center">ALU Operation</div>',
                    description: '<div>In third clock of R-type instruction, ALU is being told to use "funct" field read from instruction. This means that the instruction itself is responsible for determining what operation ALU will do its arguments.</div>',
                    value: (cpu: CPU) => cpu.instruction.funct,
                },
                {
                    ids: [168, 186],
                    additional: ['151', '148', '95', '89', '190', '69', '57', '44', '37', '16', '15', 'ALU_Control_text', 'ALU_Control_background'],
                    title: '<div class="text-center">ALUOp</div>',
                    description: '<div>Tells the ALU to use "funct" field from instruction.</div>',
                    value: (cpu: CPU) => cpu.control.aluOp,
                },
                {
                    ids: ['143', '32', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_background'],
                    additional: ['144', '118', '117', '116', '105', '92', '55', '40', '39', '22', '21', 'registers_background', 'registers_label', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_0_text', 'ALUSelB_0_dot', 'ALUSelA_background', '186', '168', '37', 'ALU_Control_text', 'ALU_Control_background'],
                    title: '<div class="text-center">ALU</div>',
                    description: '<div>In third clock of R-type instructions, ALU does the requested operation on specified arguments (RS and RT registers). Also with the help of ALUOp control signal, ALU is being told to use the instruction\'s "funct" field to determine the operation to execute.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
            ],
        },
        {
            id: 'clock_5',
            focus: [
                '185', '179', '178', '177', '176', '174', '170', '160', '155', '153', '152', '151', '144', '118', '117', '116', '113', '109', '106', '95', '94', '191', '93', '87', '84', '83', '81', '80', '55', '40', '39', '27', '22', '21', '1', 'AND_gate_background', 'OR_gate_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'Control_background', 'Control_claim', 'Control_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_0_text', 'ALUSelB_0_dot', 'PC_background', 'PC_text', 'ALU_zero_label_dot', 'ALU_zero_label_text', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'MemToReg_background', 'PCSource_text', 'PCSource_1_text', 'PCSource_1_dot', 'Target_background', 'Target_text', 'ALU_background', 'registers_background', 169, 187, 166, 26, 96, 92, 105, 'PCSource_background',
            ],
            tooltips: [
                {
                    ids: ['116', '105', '92', '22', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot'],
                    additional: ['155', '153', '152', '151', '106', '95', '93', '87', '84', '83', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_text', '170', '174'],
                    title: '<div class="text-center">First ALU argument</div>',
                    description: '<div>First ALU argument is instruction specified register RS.</div>',
                    value: (cpu: CPU) => cpu.register(cpu.instruction.rs).value,
                },
                {
                    ids: ['144', '118', '117', '55', '40', '39', '21', '1', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_0_text', 'ALUSelB_0_dot'],
                    additional: ['187', '169', '154', '153', '152', '151', '109', '95', '94', '191', '84', '83', 'registers_background', 'registers_label', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text'],
                    title: '<div class="text-center">Second ALU argument</div>',
                    description: '<div>Second ALU argument is instruction specified register RT.</div>',
                    value: (cpu: CPU) => cpu.register(cpu.instruction.rt).value,
                },
                {
                    ids: [169, 187],
                    additional: ['187', '169', '154', '153', '152', '151', '109', '95', '94', '191', '84', '83', 'registers_background', 'registers_label', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'ALUSelB_background', '144', '118', '55', '40', '39', '1'],
                    title: '<div class="text-center">ALUSelB</div>',
                    description: '<div>Uses instruction specified register RT as second ALU argument.</div>',
                    value: (cpu: CPU) => cpu.control.aluSelB,
                },
                {
                    ids: [170, 174],
                    additional: ['155', '153', '152', '151', '106', '95', '93', '87', '84', '83', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_text', '170', '174', '105', '92', 'ALUSelA_background', 'ALUSelA_1_text', 'ALUSelA_1_dot' ],
                    title: '<div class="text-center">ALUSelA</div>',
                    description: '<div>Uses instruction specified register RS as first ALU argument.</div>',
                    value: (cpu: CPU) => cpu.control.aluSelA,
                },
                {
                    ids: ['179', 'ALU_zero_label_dot', 'ALU_zero_label_text', 'ALU_text', 'ALU_background'],
                    additional: [],
                    title: '<div class="text-center">ALU operation</div>',
                    description: '<div>In third clock of beq instructions ALU is used to determine if two arguments are equal. How? ALU is being told to subtract two the arguments. If result of subtraction is 0 then operands are indeed equal.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: [160, 176, 'AND_gate_background'],
                    additional: ['179', '178', '177', 'AND_gate_background', 'OR_gate_background', 'PC_background', 'PC_text', 'ALU_zero_label_dot', 'ALU_zero_label_text', 'ALU_text', 'ALU_background'],
                    title: '<div class="text-center">PCWriteCond</div>',
                    description: '<div>This signal is awaken and it enters into AND gate. Since AND gate needs both inputs to be 1 in order to produce 1, it\'s output depends solely on the value of ALU zero output. If ALU zero signal is 1, operands are equal and write to PC register should happen.</div>',
                    value: (cpu: CPU) => cpu.control.pcWriteCond,
                },
                {
                    ids: ['OR_gate_background'],
                    additional: [160, 176, '179', '178', '177', 'AND_gate_background', 'OR_gate_background', 'PC_background', 'PC_text', 'ALU_zero_label_dot', 'ALU_zero_label_text', 'ALU_text', 'ALU_background'],
                    title: '<div class="text-center">OR Gate</div>',
                    description: '<div>This gate determines if write to PC register should happen. Since this is an OR gate, it\'s value depends solely on the value of AND operation between PCWriteCond and ALU Zero output.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: ['PC_background', 'PC_text'],
                    additional: [],
                    title: '<div class="text-center">PC register</div>',
                    description: '<div>Register will get updated if registers RT and RS are equal. What address will get written to PC? Address calculated in second clock, contained in $target register.</div>',
                    value: (cpu: CPU) => cpu.register('$pc').value,
                },
                {
                    ids: ['155', '153', '152', '151', '109', '106', '95', '94', '191', '93', '84', '83', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'write_register_label_dot', 'write_register_label_text_2', 'write_data_label_dot_2', 'write_data_label_text_2', 'instruction_background', 'instruction_label', 'instruction_25_0_label_dot', 'instruction_25_0_label_text', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', '87'],
                    additional: [92, 105, 39, 1, 55, 144, 40, 118],
                    title: '<div class="text-center">Reading registers</div>',
                    description: '<div>Both instruction specified registers (RS and RT) are accessed and compared.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: [166, 185],
                    additional: [],
                    title: '<div class="text-center">PCSource</div>',
                    description: '<div>Selects value of $target register to be written to PC, if condition is met.</div>',
                    value: (cpu: CPU) => cpu.control.pcSource,
                },
                {
                    ids: ['113', '27', '26', 'PCSource_background', 'PCSource_text', 'PCSource_1_text', 'PCSource_1_dot', 'Target_background', 'Target_text'],
                    additional: [185, 166],
                    title: '<div class="text-center">Target</div>',
                    description: '<div>Target register contains branch address calculated in clock 2. If condition is met (value of RS is equal to the value of RT) then contents of $target register are written into PC.</div>',
                    value: (cpu: CPU) => cpu.register('$target').value,
                },
            ],
        },
        {
            id: 'clock_6',
            focus: [
                '185', '177', '175', '166', '159', '155', '153', '152', '151', '142', '114', '96', '95', '88', '87', '86', '85', '84', '83', '48', '47', '46', '45', '30', '29', '26', '24', '19', '14', '12', '10', 'OR_gate_background', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'SHL_2_x2_text_1', 'PC_background', 'PC_text', 'MemToReg_background', 'PCSource_text', 'PCSource_2_text', 'PCSource_2_dot', 'SHL_2_x2_background_1', 'Control_background', 'Control_claim', 'Control_op_text', 'Control_text', 'PCSource_background',
            ],
            tooltips: [
                {
                    ids: ['155', '153', '152', '151', '142', '114', '95', '88', '87', '86', '85', '84', '83', '47', '45', '30', '29', '24', '19', '14', '12', '10', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'SHL_2_x2_text_1', 'SHL_2_x2_background_1', 'PCSource_background', 'PCSource_text', 'PCSource_2_text', 'PCSource_2_dot'],
                    additional: [],
                    title: '<div class="text-center">Jump address</div>',
                    description: '<div>Jump address is 25-bit instruction specified value.</div>',
                    value: (cpu: CPU) => cpu.instruction.address,
                },
                {
                    ids: ['96', '26', 'PC_background', 'PC_text'],
                    additional: ['185', '166', 'PCSource_background', 'PCSource_text', 'PCSource_2_text', 'PCSource_2_dot'],
                    title: '<div class="text-center">PC value update</div>',
                    description: '<div>In order to complete jump, PC register is updated with instruction specified address.</div>',
                    value: (cpu: CPU) => cpu.register('$pc').value,
                },
                {
                    ids: [166, 185],
                    additional: ['185', '166', 'PCSource_background', 'PCSource_text', 'PCSource_2_text', 'PCSource_2_dot', '26', '96'],
                    title: '<div class="text-center">PCSource</div>',
                    description: '<div>Passes instruction specified 25-bit address to PC register.</div>',
                    value: (cpu: CPU) => cpu.control.pcSource,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: ['177', '175', '159', 'OR_gate_background'],
                    additional: [],
                    title: '<div class="text-center">PCWrite</div>',
                    description: '<div>Signal allowing write to PC register to happen. Since PCWrite is brought to OR gate and its value is 1, output of a gate will be 1, which means write is allowed.</div>',
                    value: (cpu: CPU) => cpu.control.pcWrite,
                },
            ],
        },
        {
            id: 'clock_7',
            focus: [
                '186', '181', '174', '170', '168', '162', '157', '155', '152', '151', '150', '148', '147', '143', '133', '132', '130', '123', '122', '117', '116', '106', '105', '99', '98', '95', '93', '92', '89', '87', '84', '83', '78', '75', '190', '69', '63', '62', '61', '59', '52', '51', '49', '38', '37', '32', '22', '21', '17', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'read_address_label_dot', 'read_address_label_text', 'lorD_background', 'lorD_text', 'lorD_1_text', 'lorD_1_dot', 'Sign_Extend_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_2_text', 'ALUSelB_2_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_Control_text', 'ALU_background', 'ALU_Control_background', 'Sign_Extend_background', 'Control_background', 'Control_claim', 'Control_text',  '180', '161', 'lorD_background', 'lorD_text', 'lorD_1_text', 'lorD_1_dot', '169', '187',
            ],
            tooltips: [
                {
                    ids: ['187', '186', '174', '170', '169', '168', '155', '153', '152', '151', '148', '147', '143', '123', '122', '117', '116', '106', '105', '95', '93', '92', '89', '87', '84', '83', '190', '69', '62', '61', '59', '52', '49', '38', '37', '32', '22', '21', '17', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'write_register_label_dot', 'write_register_label_text_2', 'write_data_label_dot_2', 'write_data_label_text_2', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'Sign_Extend_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_2_text', 'ALUSelB_2_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_Control_text', 'ALU_background', 'ALU_Control_background', 'Sign_Extend_background'],
                    additional: [],
                    title: '<div class="text-center">Preserving ALU result</div>',
                    description: '<div>Entire state from third clock remains the same which means that ALU result to be address from which the word will be loaded.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: [180, 161, 130, 98, 'lorD_background', 'lorD_text', 'lorD_1_text', 'lorD_1_dot', 'lorD_background', 'lorD_text', 'lorD_0_text', 'lorD_0_dot', 'lorD_1_text', 'lorD_1_dot', 'memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'read_address_label_dot', 'read_address_label_text', 'write_address_label_dot', 'write_address_label_text', 'write_data_label_dot_1', 'write_data_label_text_1', '157', '150', '143', '133', '132', '99', '63'],
                    additional: ['157', '150', '143', '133', '132', '99', '63'],
                    title: '<div class="text-center">lorD</div>',
                    description: '<div>Selects ALU result as memory read address.</div>',
                    value: (cpu: CPU) => cpu.control.lorD,
                },
                {
                    ids: [162, 181],
                    additional: ['memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'read_address_label_dot', 'read_address_label_text'],
                    title: '<div class="text-center">MemRead</div>',
                    description: '<div>Allows memory reading from address specified by ALU result.</div>',
                    value: (cpu: CPU) => cpu.control.memRead,
                },
            ],
        },
        {
            id: 'clock_8',
            focus: [
                '186', '181', '174', '170', '168', '162', '157', '155', '152', '151', '150', '148', '147', '143', '133', '123', '122', '117', '116', '106', '105', '95', '93', '92', '89', '87', '84', '83', '78', '75', '190', '69', '63', '62', '61', '59', '52', '51', '49', '38', '37', '32', '22', '21', '17', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'read_address_label_dot', 'read_address_label_text', 'Sign_Extend_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_2_text', 'ALUSelB_2_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_Control_text', 'ALU_background', 'ALU_Control_background', 'Sign_Extend_background', 'Control_background', 'Control_claim', 'Control_text', '169', '187', '131', '101', '100', '65', '58', '39', '2', 'write_address_label_dot', 'write_address_label_text', 'write_data_label_dot_1', 'write_data_label_text_1', '56', '54', '1', '154', '109', '94', '191', 'read_register_2_label_dot', 'read_register_2_label_text',
            ],
            tooltips: [
                {
                    ids: ['187', '186', '174', '170', '169', '168', '155', '153', '152', '151', '148', '147', '143', '123', '122', '117', '116', '106', '105', '95', '93', '92', '89', '87', '84', '83', '190', '69', '62', '61', '59', '52', '49', '38', '37', '32', '22', '21', '17', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'write_register_label_dot', 'write_register_label_text_2', 'write_data_label_dot_2', 'write_data_label_text_2', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'Sign_Extend_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_2_text', 'ALUSelB_2_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_Control_text', 'ALU_background', 'ALU_Control_background', 'Sign_Extend_background'],
                    additional: [],
                    title: '<div class="text-center">Preserving ALU result</div>',
                    description: '<div>Entire state from third clock remains the same which means that ALU result to be address from which the word will be loaded.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: ['154', '109', '100', '94', '191', '65', '58', '56', '54', '39', '1', 'read_register_2_label_dot', 'read_register_2_label_text', 'write_data_label_dot_1', 'write_data_label_text_1'],
                    additional: ['registers_background', 'registers_label', 'write_register_label_text_2'],
                    title: '<div class="text-center">Write register</div>',
                    description: '<div>Destination register, specified by instruction, which will be populated with value read from memory.</div>',
                    value: (cpu: CPU) => cpu.instruction.rt,
                },
                {
                    ids: ['157', '143', '133', '132', '63', '150'],
                    additional: [],
                    title: '<div class="text-center">Write address</div>',
                    description: '<div>Address computed in third clock by adding 16-bit offset to base register (RS).</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: ['memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'read_address_label_text', 'write_address_label_dot', 'write_address_label_text', 'write_data_label_dot_1', 'write_data_label_text_1'],
                    additional: ['157', '150', '143', '133', '131', '101', '100', '65', '63', '58', '56', '54', '39', '2', '1'],
                    title: '<div class="text-center">Memory</div>',
                    description: '<div>In this clock value in memory is written. What address? Address was calculated in previous step and is the output of ALU unit. What value? Value of instruction specified register RT.</div>',
                    value: (cpu: CPU) => cpu.memory.get(cpu.alu.result),
                },
                {
                    ids: [162, 181],
                    additional: ['memory_background', 'memory_label', 'mem_data_label_text', 'read_address_label_dot', 'read_address_label_text'],
                    title: '<div class="text-center">MemRead</div>',
                    description: '<div>Allows reading from RAM memory.</div>',
                    value: (cpu: CPU) => cpu.control.memRead,
                },
            ],
        },
        {
            id: 'clock_9',
            focus: [
                '189', '188', '186', '184', '174', '171', '170', '165', '155', '153', '152', '151', '150', '148', '144', '143', '125', '124', '118', '117', '116', '110', '109', '107', '106', '105', '95', '94', '191', '93', '92', '90', '89', '87', '84', '83', '82', '81', '80', '79', '78', '77', '73', '72', '71', '190', '68', '67', '69', '63', '57', '55', '44', '40', '39', '32', '22', '21', '16', '15', '1', 'RegDst_background', 'RegDst_text', 'RegDst_1_text', 'RegDst_1_dot', 'MemToReg_Background', 'MemToReg_text', 'MemToReg_0_text', 'MemToReg_0_dot', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'write_register_label_dot', 'write_register_label_text_2', 'write_data_label_dot_2', 'write_data_label_text_2', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'Control_background', 'Control_claim', 'Control_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_0_text', 'ALUSelB_0_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_Control_text', 'ALU_background', 'ALU_Control_background', 'registers_background', '168', '169', '187', '172',
            ],
            tooltips: [
                {
                    ids: ['187', '186', '174', '170', '169', '168', '155', '154', '153', '152', '151', '148', '144', '118', '117', '116', '109', '106', '105', '95', '94', '191', '93', '92', '89', '87', '84', '83', '190', '69', '57', '55', '44', '40', '39', '37', '22', '21', '16', '15', '5', '1', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'instruction_label', 'instruction_25_0_label_dot', 'instruction_25_0_label_text', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_text', 'ALUSelB_0_text', 'ALUSelB_0_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_Control_text', 'ALU_background', 'ALU_Control_background', 'instruction_background', 'instruction_label', 'instruction_25_0_label_dot', 'instruction_25_0_label_text', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'ALUSelB_background', 'registers_background'],
                    additional: [],
                    title: '<div class="text-center">Preserving ALU result</div>',
                    description: '<div>Entire state from third clock remains the same which means that ALU result to be address from which the word will be loaded.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: ['125', '107', '90', '82', 'RegDst_background', 'RegDst_text', 'RegDst_0_text', 'RegDst_0_dot', 'RegDst_1_text', 'RegDst_1_dot', 151, 95, 84, 152],
                    additional: ['registers_background'],
                    title: '<div class="text-center">Write register</div>',
                    description: '<div>Instruction specified write register RD.</div>',
                    value: (cpu: CPU) => cpu.instruction.rd,
                },
                {
                    ids: ['150', '143', '124', '110', '73', '72', '71', '68', '67', '63', '32', 'MemToReg_Background', 'MemToReg_text', 'MemToReg_0_text', 'MemToReg_0_dot', 'MemToReg_1_text', 'MemToReg_1_dot'],
                    additional: ['registers_background'],
                    title: '<div class="text-center">Write data</div>',
                    description: '<div>Value to be written to destination register. What value? Value is ALU result of executing operation specified with "funct" instruction field on registers RT and RS in third clock.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: [171, 188],
                    additional: ['registers_background'],
                    title: '<div class="text-center">RegWrite</div>',
                    description: '<div>Allows writing to destination register to happen.</div>',
                    value: (cpu: CPU) => cpu.control.regWrite,
                },
                {
                    ids: [172, 189],
                    additional: ['RegDst_background'],
                    title: '<div class="text-center">MemToReg</div>',
                    description: '<div>Selects ALU result as data to be written to destination register.</div>',
                    value: (cpu: CPU) => cpu.control.memToReg,
                },
                {
                    ids: [165, 184],
                    additional: ['MemToReg_Background'],
                    title: '<div class="text-center">RegDst</div>',
                    description: '<div>Selects instruction specified register RD as write register.</div>',
                    value: (cpu: CPU) => cpu.control.regDst,
                },
            ],
        },
        {
            id: 'clock_10',
            focus: [
                '189', '188', '187', '186', '184', '181', '180', '174', '172', '171', '170', '169', '168', '165', '162', '161', '157', '156', '155', '154', '153', '152', '151', '150', '148', '147', '143', '136', '134', '133', '132', '130', '123', '122', '116', '111', '108', '106', '105', '98', '95', '93', '92', '89', '87', '84', '83', '81', '78', '75', '74', '73', '70', '190', '66', '69', '63', '62', '61', '59', '52', '51', '49', '38', '37', '32', '22', '17', 'RegDst_background', 'RegDst_text', 'RegDst_0_text', 'RegDst_0_dot', 'MemToReg_Background', 'MemToReg_text', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'read_address_label_dot', 'read_address_label_text', 'lorD_background', 'lorD_text', 'lorD_1_text', 'lorD_1_dot', 'Sign_Extend_text', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_2_text', 'ALUSelB_2_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_Control_text', 'ALU_background', 'ALU_Control_background', 'Sign_Extend_background', 'ALUSelA_background', 'memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'Control_background', 'Control_claim', 'Control_text', 'MemToReg_1_dot', 'MemToReg_1_text', '82', '125', '191', 'write_register_label_dot', 'write_register_label_text_2', 'write_data_label_dot_2', 'write_data_label_text_2',
            ],
            tooltips: [
                {
                    ids: ['187', '186', '174', '170', '169', '168', '155', '153', '152', '151', '148', '147', '143', '123', '122', '117', '116', '106', '105', '95', '93', '92', '89', '87', '84', '83', '190', '69', '62', '61', '59', '52', '49', '38', '37', '32', '22', '21', '17', 'registers_background', 'registers_label', 'read_register_1_label_dot', 'read_register_1_label_text', 'read_register_2_label_dot', 'read_register_2_label_text', 'read_data_1_label_dot', 'read_data_1_label_text', 'read_data_2_label_dot', 'read_data_2_label_text', 'write_register_label_dot', 'write_register_label_text_2', 'write_data_label_dot_2', 'write_data_label_text_2', 'instruction_background', 'instruction_label', 'instruction_31_26_label_dot', 'instruction_31_26_label_text', 'Sign_Extend_text', 'ALUSelA_background', 'ALUSelA_text', 'ALUSelA_1_text', 'ALUSelA_1_dot', 'ALUSelB_background', 'ALUSelB_text', 'ALUSelB_2_text', 'ALUSelB_2_dot', 'ALU_result_label_dot', 'ALU_result_label_text', 'ALU_text', 'ALU_Control_text', 'ALU_background', 'ALU_Control_background', 'Sign_Extend_background'],
                    additional: [],
                    title: '<div class="text-center">Preserving ALU result</div>',
                    description: '<div>Entire state from third clock remains the same which means that ALU result to be address from which the word will be loaded.</div>',
                    value: (cpu: CPU) => cpu.alu.result,
                },
                {
                    ids: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    additional: ['Control_background', 'Control_claim', 'Control_dot', 'Control_op_text', 'Control_text'],
                    title: '<div class="text-center">Control Unit</div>',
                    description: '<div>Sends out control signals.</div>',
                    value: (cpu: CPU) => null,
                },
                {
                    ids: [180, 161, 130, 98, 'lorD_background', 'lorD_text', 'lorD_1_text', 'lorD_1_dot', 'lorD_background', 'lorD_text', 'lorD_0_text', 'lorD_0_dot', 'lorD_1_text', 'lorD_1_dot', 'memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'read_address_label_dot', 'read_address_label_text', 'write_address_label_dot', 'write_address_label_text', 'write_data_label_dot_1', 'write_data_label_text_1', '157', '150', '143', '133', '132', '99', '63', '156', '136', '134', '111', '70', '66'],
                    additional: ['157', '150', '143', '133', '132', '99', '63'],
                    title: '<div class="text-center">lorD</div>',
                    description: '<div>Selects ALU result as memory read address.</div>',
                    value: (cpu: CPU) => cpu.control.lorD,
                },
                {
                    ids: [162, 181],
                    additional: ['memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text', 'read_address_label_dot', 'read_address_label_text'],
                    title: '<div class="text-center">MemRead</div>',
                    description: '<div>Allows memory reading from address specified by ALU result.</div>',
                    value: (cpu: CPU) => cpu.control.memRead,
                },
                {
                    ids: ['125', '108', '82', '74', 'RegDst_background', 'RegDst_text', 'RegDst_0_text', 'RegDst_0_dot', 'RegDst_1_text', 'RegDst_1_dot', '191', '154'],
                    additional: ['registers_background', '153', '152', '151', '95', '84', '83'],
                    title: '<div class="text-center">Destination register</div>',
                    description: '<div>Value read from memory will be written to instruction specified register RT.</div>',
                    value: (cpu: CPU) => cpu.instruction.rt,
                },
                {
                    ids: [189, 172],
                    additional: ['125', '82', 'RegDst_background', 'RegDst_text', 'RegDst_0_text', 'RegDst_0_dot'],
                    title: '<div class="text-center">RegDst</div>',
                    description: '<div>Selects instruction specified register RT as write register.</div>',
                    value: (cpu: CPU) => cpu.control.regDst,
                },
                {
                    ids: ['156', '136', '134', '124', '111', '73', '70', '66', 'MemToReg_Background', 'MemToReg_text', 'MemToReg_1_text', 'MemToReg_1_dot', 'write_data_label_dot_2', 'write_data_label_text_2'],
                    additional: ['memory_background', 'memory_label', 'mem_data_label_dot', 'mem_data_label_text'],
                    title: '<div class="text-center">Write Data</div>',
                    description: '<div>Data read from memory which is being written to instruction specified register RS.</div>',
                    value: (cpu: CPU) => cpu.register('$memData').value,
                },
                {
                    ids: [184, 165],
                    additional: ['125', '82', 'RegDst_background', 'RegDst_text', 'RegDst_1_text', 'RegDst_1_dot'],
                    title: '<div class="text-center">MemToReg</div>',
                    description: '<div>Selects value read from memory as data which is being written to RS register.</div>',
                    value: (cpu: CPU) => cpu.control.memToReg,
                },
                {
                    ids: [188, 171],
                    additional: ['registers_background'],
                    title: '<div class="text-center">RegWrite</div>',
                    description: '<div>Allows write to instruction specified register RS.</div>',
                    value: (cpu: CPU) => cpu.control.regWrite,
                },
            ],
        }
    ],
};

export default Specification;
